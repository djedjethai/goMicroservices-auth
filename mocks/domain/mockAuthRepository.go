// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/djedjethai/bankingAuth/domain (interfaces: AuthRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	domain "github.com/djedjethai/bankingAuth/domain"
	errs "github.com/djedjethai/bankingAuth/errs"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// CreateCustAndUser mocks base method.
func (m *MockAuthRepository) CreateCustAndUser(arg0 domain.CustomerDomain) (*domain.Login, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustAndUser", arg0)
	ret0, _ := ret[0].(*domain.Login)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// CreateCustAndUser indicates an expected call of CreateCustAndUser.
func (mr *MockAuthRepositoryMockRecorder) CreateCustAndUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustAndUser", reflect.TypeOf((*MockAuthRepository)(nil).CreateCustAndUser), arg0)
}

// FindBy mocks base method.
func (m *MockAuthRepository) FindBy(arg0, arg1 string) (*domain.Login, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0, arg1)
	ret0, _ := ret[0].(*domain.Login)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy.
func (mr *MockAuthRepositoryMockRecorder) FindBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockAuthRepository)(nil).FindBy), arg0, arg1)
}

// GenerateAndSaveRefreshTokenToStore mocks base method.
func (m *MockAuthRepository) GenerateAndSaveRefreshTokenToStore(arg0 domain.AuthToken) (string, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAndSaveRefreshTokenToStore", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GenerateAndSaveRefreshTokenToStore indicates an expected call of GenerateAndSaveRefreshTokenToStore.
func (mr *MockAuthRepositoryMockRecorder) GenerateAndSaveRefreshTokenToStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAndSaveRefreshTokenToStore", reflect.TypeOf((*MockAuthRepository)(nil).GenerateAndSaveRefreshTokenToStore), arg0)
}

// IsUsernameExist mocks base method.
func (m *MockAuthRepository) IsUsernameExist(arg0 string) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUsernameExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// IsUsernameExist indicates an expected call of IsUsernameExist.
func (mr *MockAuthRepositoryMockRecorder) IsUsernameExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUsernameExist", reflect.TypeOf((*MockAuthRepository)(nil).IsUsernameExist), arg0)
}

// RefreshTokenExists mocks base method.
func (m *MockAuthRepository) RefreshTokenExists(arg0 string) *errs.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenExists", arg0)
	ret0, _ := ret[0].(*errs.AppError)
	return ret0
}

// RefreshTokenExists indicates an expected call of RefreshTokenExists.
func (mr *MockAuthRepositoryMockRecorder) RefreshTokenExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenExists", reflect.TypeOf((*MockAuthRepository)(nil).RefreshTokenExists), arg0)
}
